name: CA clone with existing DS
# https://github.com/dogtagpki/pki/wiki/Installing-CA-Clone-with-Existing-DS

on:
  workflow_call:
    inputs:
      db-image:
        required: false
        type: string

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Retrieve PKI images
        uses: actions/cache@v3
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh client
        env:
          HOSTNAME: client.example.com

      - name: Connect client container to network
        run: docker network connect example client --alias client.example.com

      - name: Set up primary DS container
        run: |
          tests/bin/ds-container-create.sh primaryds
        env:
          IMAGE: pki-runner
          HOSTNAME: primaryds.example.com
          PASSWORD: Secret.123

      - name: Connect primary DS container to network
        run: docker network connect example primaryds --alias primaryds.example.com

      # https://github.com/dogtagpki/pki/wiki/Setting-up-CA-Database
      - name: Configure primary DS database
        run: |
          docker exec primaryds ldapadd \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/base/server/database/ds/config.ldif

      - name: Add PKI schema
        run: |
          docker exec primaryds ldapmodify \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/base/server/database/ds/schema.ldif

      - name: Add CA base entry
        run: |
          docker exec -i primaryds ldapadd \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 << EOF
          dn: dc=ca,dc=pki,dc=example,dc=com
          objectClass: dcObject
          dc: ca
          EOF

      - name: Add CA database entries
        run: |
          sed \
              -e 's/{rootSuffix}/dc=ca,dc=pki,dc=example,dc=com/g' \
              base/ca/database/ds/create.ldif \
              | tee create.ldif
          docker exec primaryds ldapadd \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/create.ldif

      - name: Add CA ACL resources
        run: |
          sed \
              -e 's/{rootSuffix}/dc=ca,dc=pki,dc=example,dc=com/g' \
              base/ca/database/ds/acl.ldif \
              | tee acl.ldif
          docker exec primaryds ldapadd \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/acl.ldif

      - name: Add CA search indexes
        run: |
          sed \
              -e 's/{database}/userroot/g' \
              base/ca/database/ds/index.ldif \
              | tee index.ldif
          docker exec primaryds ldapadd \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/index.ldif

      - name: Rebuild CA search indexes
        run: |
          # start rebuild task
          sed \
              -e 's/{database}/userroot/g' \
              base/ca/database/ds/indextasks.ldif \
              | tee indextasks.ldif
          docker exec primaryds ldapadd \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/indextasks.ldif

          # wait for task to complete
          while true; do
              sleep 1

              docker exec primaryds ldapsearch \
                  -H ldap://primaryds.example.com:3389 \
                  -D "cn=Directory Manager" \
                  -w Secret.123 \
                  -b "cn=index1160589770, cn=index, cn=tasks, cn=config" \
                  -LLL \
                  nsTaskExitCode \
                  | tee output

              sed -n -e 's/nsTaskExitCode:\s*\(.*\)/\1/p' output > nsTaskExitCode
              cat nsTaskExitCode

              if [ -s nsTaskExitCode ]; then
                  break
              fi
          done

          echo "0" > expected
          diff expected nsTaskExitCode

      - name: Grant access to PKI database user
        run: |
          sed \
              -e 's/{rootSuffix}/dc=example,dc=com/g' \
              -e 's/{dbuser}/uid=pkidbuser,ou=people,dc=ca,dc=pki,dc=example,dc=com/g' \
              base/server/database/ds/db-access-grant.ldif \
              | tee db-access-grant.ldif
          docker exec primaryds ldapadd \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/db-access-grant.ldif \
              -c

      - name: Add CA VLV indexes
        run: |
          sed \
              -e 's/{instanceId}/pki-tomcat/g' \
              -e 's/{database}/userroot/g' \
              -e 's/{rootSuffix}/dc=ca,dc=pki,dc=example,dc=com/g' \
              base/ca/database/ds/vlv.ldif \
              | tee vlv.ldif
          docker exec primaryds ldapadd \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/vlv.ldif

      - name: Rebuild CA VLV indexes
        run: |
          # start rebuild task
          sed \
              -e 's/{database}/userroot/g' \
              -e 's/{instanceId}/pki-tomcat/g' \
              base/ca/database/ds/vlvtasks.ldif \
              | tee vlvtasks.ldif
          docker exec primaryds ldapadd \
              -H ldap://primaryds.example.com:3389 \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -f $SHARED/vlvtasks.ldif

          # wait for task to complete
          while true; do
              sleep 1

              docker exec primaryds ldapsearch \
                  -H ldap://primaryds.example.com:3389 \
                  -D "cn=Directory Manager" \
                  -w Secret.123 \
                  -b "cn=index1160589769, cn=index, cn=tasks, cn=config" \
                  -LLL \
                  nsTaskExitCode \
                  | tee output

              sed -n -e 's/nsTaskExitCode:\s*\(.*\)/\1/p' output > nsTaskExitCode
              cat nsTaskExitCode

              if [ -s nsTaskExitCode ]; then
                  break
              fi
          done

          echo "0" > expected
          diff expected nsTaskExitCode

      - name: Set up primary PKI container
        run: |
          tests/bin/runner-init.sh primary
        env:
          HOSTNAME: primary.example.com

      - name: Connect primary PKI container to network
        run: docker network connect example primary --alias primary.example.com

      - name: Install CA in primary PKI container
        run: |
          docker exec primary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://primaryds.example.com:3389 \
              -D pki_ds_setup=False \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec primary pki-server cert-find

      - name: Verify users and SD hosts in primary PKI container
        run: |
          docker exec primary pki-server cert-export ca_signing --cert-file ${SHARED}/ca_signing.crt
          docker exec primary pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec primary pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec primary pki -n caadmin ca-user-find
          docker exec primary pki securitydomain-host-find

      - name: Check certs in primary CA
        run: |
          docker exec primary pki ca-cert-find

      - name: Check cert requests in primary CA
        run: |
          docker exec primary pki -n caadmin ca-cert-request-find

      - name: Set up secondary DS container
        run: |
          tests/bin/ds-container-create.sh secondaryds
        env:
          IMAGE: pki-runner
          HOSTNAME: secondaryds.example.com
          PASSWORD: Secret.123

      - name: Connect secondary DS container to network
        run: docker network connect example secondaryds --alias secondaryds.example.com

      # https://github.com/dogtagpki/389-ds-base/wiki/Configuring-DS-Replication-with-DS-Tools
      - name: Enable replication on primary DS
        run: |
          docker exec primaryds dsconf \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              ldap://primaryds.example.com:3389 \
              replication enable \
              --suffix=dc=example,dc=com \
              --role=supplier \
              --replica-id=1 \
              --bind-dn="cn=Replication Manager,cn=config" \
              --bind-passwd=Secret.123

      - name: Enable replication on secondary DS
        run: |
          docker exec secondaryds dsconf \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              ldap://secondaryds.example.com:3389 \
              replication enable \
              --suffix=dc=example,dc=com \
              --role=supplier \
              --replica-id=2 \
              --bind-dn="cn=Replication Manager,cn=config" \
              --bind-passwd=Secret.123

      - name: Start replication on primary DS
        run: |
          docker exec primaryds dsconf \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              ldap://primaryds.example.com:3389 \
              repl-agmt create \
              --suffix=dc=example,dc=com \
              --host=secondaryds.example.com \
              --port=3389 \
              --conn-protocol=LDAP \
              --bind-dn="cn=Replication Manager,cn=config" \
              --bind-passwd=Secret.123 \
              --bind-method=SIMPLE \
              --init \
              primaryds-to-secondaryds

          # wait until initialization is complete
          counter=0
          while [[ "$counter" -lt 30 ]]; do
              sleep 1

              docker exec primaryds dsconf \
                  -D "cn=Directory Manager" \
                  -w Secret.123 \
                  ldap://primaryds.example.com:3389 \
                  repl-agmt init-status \
                  --suffix=dc=example,dc=com \
                  primaryds-to-secondaryds \
                  > >(tee stdout) 2> >(tee stderr >&2) || true

              STDOUT=$(cat stdout)
              if [ "$STDOUT" = "Agreement successfully initialized." ]; then
                  break
              fi

              counter=$((counter+1))
          done

      - name: Start replication on secondary DS
        run: |
          docker exec secondaryds dsconf \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              ldap://secondaryds.example.com:3389 \
              repl-agmt create \
              --suffix=dc=example,dc=com \
              --host=primaryds.example.com \
              --port=3389 \
              --conn-protocol=LDAP \
              --bind-dn="cn=Replication Manager,cn=config" \
              --bind-passwd=Secret.123 \
              --bind-method=SIMPLE \
              secondaryds-to-primaryds

      - name: Verify primary DS and secondary DS have the same entries
        run: |
          # get DNs from primary DS
          docker exec client ldapsearch \
              -H ldap://primaryds.example.com:3389 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -b "dc=example,dc=com" \
              -o ldif_wrap=no \
              -LLL \
              dn \
              | sed -ne 's/^dn: \(.*\)$/\1/p' | sort | tee primaryds.dn

          echo "----------------------------------"
          # get DNs from secondary DS
          docker exec client ldapsearch \
              -H ldap://secondaryds.example.com:3389 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -b "dc=example,dc=com" \
              -o ldif_wrap=no \
              -LLL \
              dn \
              | sed -ne 's/^dn: \(.*\)$/\1/p' | sort | tee secondaryds.dn

          diff primaryds.dn secondaryds.dn

      - name: Export certs and CSRs from primary CA
        run: |
          docker exec primary pki-server ca-clone-prepare \
              --pkcs12-file ${SHARED}/ca-certs.p12 \
              --pkcs12-password Secret.123

          docker exec primary pki-server cert-export ca_signing \
              --csr-file ${SHARED}/ca_signing.csr

          docker exec primary pki-server cert-export ca_ocsp_signing \
              --csr-file ${SHARED}/ca_ocsp_signing.csr

          docker exec primary pki-server cert-export ca_audit_signing \
              --csr-file ${SHARED}/ca_audit_signing.csr

          docker exec primary pki-server cert-export subsystem \
              --csr-file ${SHARED}/subsystem.csr

      - name: Set up secondary PKI container
        run: |
          tests/bin/runner-init.sh secondary
        env:
          HOSTNAME: secondary.example.com

      - name: Connect secondary PKI container to network
        run: docker network connect example secondary --alias secondary.example.com

      - name: Install CA in secondary PKI container
        run: |
          # get CS.cfg from primary CA before cloning
          docker cp primary:/etc/pki/pki-tomcat/ca/CS.cfg CS.cfg.primary

          docker exec secondary pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-clone.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/ca_signing.crt \
              -D pki_clone_pkcs12_path=${SHARED}/ca-certs.p12 \
              -D pki_clone_pkcs12_password=Secret.123 \
              -D pki_ca_signing_csr_path=${SHARED}/ca_signing.csr \
              -D pki_ocsp_signing_csr_path=${SHARED}/ca_ocsp_signing.csr \
              -D pki_audit_signing_csr_path=${SHARED}/ca_audit_signing.csr \
              -D pki_subsystem_csr_path=${SHARED}/subsystem.csr \
              -D pki_ds_url=ldap://secondaryds.example.com:3389 \
              -D pki_ds_setup=False \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

          docker exec secondary pki-server cert-find

      - name: Check CS.cfg in primary CA after cloning
        run: |
          # get CS.cfg from primary CA after cloning
          docker cp primary:/etc/pki/pki-tomcat/ca/CS.cfg CS.cfg.primary.after

          diff CS.cfg.primary CS.cfg.primary.after

      - name: Check CS.cfg in secondary CA
        run: |
          # get CS.cfg from secondary CA
          docker cp secondary:/etc/pki/pki-tomcat/ca/CS.cfg CS.cfg.secondary

          # normalize expected result:
          # - remove params that cannot be compared
          # - replace primary.example.com with secondary.example.com
          # - replace primaryds.example.com with secondaryds.example.com
          # - set ca.crl.MasterCRL.enableCRLCache to false (automatically disabled in the clone)
          # - set ca.crl.MasterCRL.enableCRLUpdates to false (automatically disabled in the clone)
          # - add params for the clone
          sed -e '/^installDate=/d' \
              -e '/^ca.sslserver.cert=/d' \
              -e '/^ca.sslserver.certreq=/d' \
              -e 's/primary.example.com/secondary.example.com/' \
              -e 's/primaryds.example.com/secondaryds.example.com/' \
              -e 's/^\(ca.crl.MasterCRL.enableCRLCache\)=.*$/\1=false/' \
              -e 's/^\(ca.crl.MasterCRL.enableCRLUpdates\)=.*$/\1=false/' \
              -e '$ a ca.certStatusUpdateInterval=0' \
              -e '$ a ca.listenToCloneModifications=false' \
              -e '$ a master.ca.agent.host=primary.example.com' \
              -e '$ a master.ca.agent.port=8443' \
              CS.cfg.primary.after \
              | sort > expected

          # normalize actual result:
          # - remove params that cannot be compared
          sed -e '/^installDate=/d' \
              -e '/^ca.sslserver.cert=/d' \
              -e '/^ca.sslserver.certreq=/d' \
              CS.cfg.secondary \
              | sort > actual

          diff expected actual

      - name: Verify users and SD hosts in secondary PKI container
        run: |
          docker exec primary cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${SHARED}/ca_admin_cert.p12
          docker exec secondary pki client-cert-import ca_signing --ca-cert ${SHARED}/ca_signing.crt
          docker exec secondary pki pkcs12-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec secondary pki -n caadmin ca-user-find
          docker exec secondary pki securitydomain-host-find

      - name: Check certs in secondary CA
        run: |
          docker exec secondary pki ca-cert-find

      - name: Check cert requests in secondary CA
        run: |
          docker exec secondary pki -n caadmin ca-cert-request-find

      - name: Gather artifacts from primary containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/primary primaryds
          tests/bin/pki-artifacts-save.sh primary
        continue-on-error: true

      - name: Gather artifacts from secondary containers
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/secondary secondaryds
          tests/bin/pki-artifacts-save.sh secondary
        continue-on-error: true

      - name: Remove CA from secondary PKI container
        run: |
          docker exec secondary pki -n caadmin ca-user-find
          docker exec secondary pki securitydomain-host-find
          docker exec secondary pkidestroy -i pki-tomcat -s CA -v

      - name: Remove CA from primary PKI container
        run: |
          docker exec primary pki -n caadmin ca-user-find
          docker exec primary pki securitydomain-host-find
          docker exec primary pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts from primary containers
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ca-clone-existing-ds-primary
          path: |
            /tmp/artifacts/primary

      - name: Upload artifacts from secondary containers
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ca-clone-existing-ds-secondary
          path: |
            /tmp/artifacts/secondary
