name: CA renewal

on: workflow_call

env:
  DB_IMAGE: ${{ vars.DB_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Retrieve PKI images
        uses: actions/cache@v3
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ env.DB_IMAGE }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Configure short-lived SSL server cert
        run: |
          # set cert validity to 3 minute
          VALIDITY_DEFAULT="2.default.params"
          docker exec pki sed -i \
              -e "s/^$VALIDITY_DEFAULT.range=.*$/$VALIDITY_DEFAULT.range=3/" \
              -e "/^$VALIDITY_DEFAULT.range=.*$/a $VALIDITY_DEFAULT.rangeUnit=minute" \
              /usr/share/pki/ca/conf/rsaServerCert.profile

          # check updated profile
          docker exec pki cat /usr/share/pki/ca/conf/rsaServerCert.profile

      - name: Configure short-lived subsystem cert
        run: |
          # set cert validity to 3 minute
          VALIDITY_DEFAULT="2.default.params"
          docker exec pki sed -i \
              -e "s/^$VALIDITY_DEFAULT.range=.*$/$VALIDITY_DEFAULT.range=3/" \
              -e "/^$VALIDITY_DEFAULT.range=.*$/a $VALIDITY_DEFAULT.rangeUnit=minute" \
              /usr/share/pki/ca/conf/rsaSubsystemCert.profile

          # check updated profile
          docker exec pki cat /usr/share/pki/ca/conf/rsaSubsystemCert.profile

      - name: Configure short-lived audit signing cert
        run: |
          # set cert validity to 3 minute
          VALIDITY_DEFAULT="2.default.params"
          docker exec pki sed -i \
              -e "s/^$VALIDITY_DEFAULT.range=.*$/$VALIDITY_DEFAULT.range=3/" \
              -e "/^$VALIDITY_DEFAULT.range=.*$/a $VALIDITY_DEFAULT.rangeUnit=minute" \
              /usr/share/pki/ca/conf/caAuditSigningCert.profile

          # check updated profile
          docker exec pki cat /usr/share/pki/ca/conf/caAuditSigningCert.profile

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_url=ldap://ds.example.com:3389 \
              -v

              # -D pki_cert_id_generator=random \
              # -D pki_request_id_generator=random \

          docker exec pki pki-server cert-find

      - name: Run PKI healthcheck
        run: |
          # healthcheck should generate warnings
          docker exec pki pki-healthcheck --failures-only \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          echo "Expiring in a day: sslserver" > expected
          echo "Expiring in a day: subsystem" >> expected
          echo "Expiring in a day: ca_audit_signing" >> expected
          diff expected stderr || true

      - name: Check CA admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Restart PKI server with expired SSL server cert
        run: |
          # wait for SSL server cert to expire
          sleep 180

          docker exec pki pki-server --debug restart --wait \
              > >(tee stdout) 2> >(tee stderr >&2) || true

      - name: Run PKI healthcheck
        run: |
          # healthcheck should fail
          docker exec pki pki-healthcheck --failures-only \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          echo "Expired Cert: sslserver" > expected
          echo "Expired Cert: subsystem" >> expected
          echo "Expired Cert: ca_audit_signing" >> expected
          echo "Internal server error 404 Client Error:  for url: http://pki.example.com:8080/ca/rest/securityDomain/domainInfo" >> expected
          echo "Internal server error 404 Client Error:  for url: https://pki.example.com:8443/ca/admin/ca/getStatus" >> expected
          diff expected stderr || true

      - name: Check systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check CA debug log
        if: always()
        run: |
          docker exec pki find /var/log/pki/pki-tomcat/ca -name "debug.*" -exec cat {} \;

      - name: Check CA selftests log
        if: always()
        run: |
          docker exec pki cat /var/log/pki/pki-tomcat/ca/selftests.log

      - name: Check PKI client
        run: |
          # client should fail
          docker exec pki pki info \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          echo "ERROR: EXPIRED_CERTIFICATE encountered on 'CN=pki.example.com,OU=pki-tomcat,O=EXAMPLE' results in a denied SSL server cert!" > expected
          grep "^ERROR:" stderr > actual
          diff expected actual || true

      # https://github.com/dogtagpki/pki/wiki/Renewing-SSL-Server-Certificate
      - name: Create temp SSL server cert
        run: |
          # create temp cert
          docker exec pki pki-server cert-create sslserver --temp

          # delete current cert
          docker exec pki pki-server cert-del sslserver

          # import temp cert
          docker exec pki pki-server cert-import sslserver

          docker exec pki pki-server cert-show sslserver

      - name: Restart PKI server with temp SSL server cert
        run: |
          # disable selftests
          docker exec pki pki-server selftest-disable

          # restart server
          docker exec pki pki-server restart --wait

      - name: Run PKI healthcheck
        run: |
          # healthcheck should fail
          docker exec pki pki-healthcheck --failures-only \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          echo "Expired Cert: subsystem" > expected
          echo "Expired Cert: ca_audit_signing" >> expected
          diff expected stderr || true

      - name: Check systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check CA debug log
        if: always()
        run: |
          docker exec pki find /var/log/pki/pki-tomcat/ca -name "debug.*" -exec cat {} \;

      - name: Check CA selftests log
        if: always()
        run: |
          docker exec pki cat /var/log/pki/pki-tomcat/ca/selftests.log

      - name: Check PKI client
        run: |
          # client should work
          docker exec pki pki info

      # https://github.com/dogtagpki/pki/wiki/Renewing-SSL-Server-Certificate
      - name: Create permanent SSL server cert
        run: |
          # get current serial number
          docker exec pki pki-server cert-show sslserver | tee output
          CERT_ID=$(sed -n "s/^\s*Serial Number:\s*\(\S*\)$/\1/p" output)

          # submit renewal request
          docker exec pki pki ca-cert-request-submit \
              --profile caManualRenewal \
              --serial $CERT_ID \
              --renewal | tee output
          REQUEST_ID=$(sed -n "s/^\s*Request ID:\s*\(\S*\)$/\1/p" output)

          # approve renewal request
          docker exec pki pki -n caadmin ca-cert-request-approve \
              --force \
              $REQUEST_ID | tee output
          CERT_ID=$(sed -n "s/^\s*Certificate ID:\s*\(\S*\)$/\1/p" output)

          # export new cert
          docker exec pki pki ca-cert-export $CERT_ID --output-file sslserver.crt

          docker exec pki pki-server cert-del sslserver

          # install new cert
          docker exec pki pki-server cert-import sslserver \
              --input sslserver.crt

          docker exec pki pki-server cert-show sslserver

      # https://github.com/dogtagpki/pki/wiki/Renewing-System-Certificates
      - name: Create subsystem cert
        run: |
          # get current serial number
          docker exec pki pki-server cert-show subsystem | tee output
          CERT_ID=$(sed -n "s/^\s*Serial Number:\s*\(\S*\)$/\1/p" output)

          # submit renewal request
          docker exec pki pki ca-cert-request-submit \
              --profile caManualRenewal \
              --serial $CERT_ID \
              --renewal | tee output
          REQUEST_ID=$(sed -n "s/^\s*Request ID:\s*\(\S*\)$/\1/p" output)

          # approve renewal request
          docker exec pki pki -n caadmin ca-cert-request-approve \
              --force \
              $REQUEST_ID | tee output
          CERT_ID=$(sed -n "s/^\s*Certificate ID:\s*\(\S*\)$/\1/p" output)

          # export new cert
          docker exec pki pki ca-cert-export $CERT_ID --output-file subsystem.crt

          docker exec pki pki-server cert-del subsystem

          # install new cert
          docker exec pki pki-server cert-import subsystem \
              --input subsystem.crt

          docker exec pki pki-server cert-show subsystem

      # https://github.com/dogtagpki/pki/wiki/Renewing-System-Certificates
      - name: Create audit signing cert
        run: |
          # get current serial number
          docker exec pki pki-server cert-show ca_audit_signing | tee output
          CERT_ID=$(sed -n "s/^\s*Serial Number:\s*\(\S*\)$/\1/p" output)

          # submit renewal request
          docker exec pki pki ca-cert-request-submit \
              --profile caManualRenewal \
              --serial $CERT_ID \
              --renewal | tee output
          REQUEST_ID=$(sed -n "s/^\s*Request ID:\s*\(\S*\)$/\1/p" output)

          # approve renewal request
          docker exec pki pki -n caadmin ca-cert-request-approve \
              --force \
              $REQUEST_ID | tee output
          CERT_ID=$(sed -n "s/^\s*Certificate ID:\s*\(\S*\)$/\1/p" output)

          # export new cert
          docker exec pki pki ca-cert-export $CERT_ID --output-file ca_audit_signing.crt

          docker exec pki pki-server cert-del ca_audit_signing

          # install new cert
          docker exec pki pki-server cert-import ca_audit_signing \
              --input ca_audit_signing.crt

          docker exec pki pki-server cert-show ca_audit_signing

      - name: Restart PKI server with renewed certs
        run: |
          # enable selftests
          docker exec pki pki-server selftest-disable

          docker exec pki pki-server restart --wait

      - name: Run PKI healthcheck
        run: |
          # healthcheck should not fail
          docker exec pki pki-healthcheck --failures-only

      - name: Check PKI client
        run: |
          # client should work
          docker exec pki pki info

      - name: Replace subsystem user cert
        run: |
          # get cert ID
          docker exec pki pki-server ca-user-cert-find CA-pki.example.com-8443 | tee output
          CERT_ID=$(sed -n "s/^\s*Cert ID:\s*\(.*\)$/\1/p" output)
          echo "CERT_ID: $CERT_ID"

          # remove current cert
          docker exec pki pki-server ca-user-cert-del CA-pki.example.com-8443 "$CERT_ID"

          # install new cert
          docker exec pki pki-server ca-user-cert-add CA-pki.example.com-8443 --cert subsystem.crt

          docker exec pki pki-server ca-user-cert-find CA-pki.example.com-8443

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v
