name: CA with keyring

on:
  workflow_call:
    inputs:
      db-image:
        required: false
        type: string

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Retrieve PKI images
        uses: actions/cache@v3
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh ds
        env:
          IMAGE: ${{ inputs.db-image }}
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Store passwords in keyring
        run: |
          docker exec pki runuser -u pkiuser -- keyctl add user pki-tomcat/internal Secret.123 @u
          docker exec pki runuser -u pkiuser -- keyctl add user pki-tomcat/internaldb Secret.123 @u
          docker exec pki runuser -u pkiuser -- keyctl add user pki-tomcat/replicationdb Secret.123 @u
          docker exec pki runuser -u pkiuser -- keyctl show @u

      - name: Install CA
        run: |
          docker exec pki dnf install -y acl
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_ds_hostname=ds.example.com \
              -D pki_ds_ldap_port=3389 \
              -D pki_cert_id_generator=random \
              -D pki_request_id_generator=random \
              -v

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh client
        env:
          HOSTNAME: client.example.com

      - name: Connect client container to network
        run: docker network connect example client --alias client.example.com

      - name: Wait for PKI server to start
        run: |
          docker exec client curl \
              --retry 60 \
              --retry-delay 0 \
              --retry-connrefused \
              -s \
              -k \
              -o /dev/null \
              https://pki.example.com:8443

      - name: Check systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Stop PKI server
        run: |
          docker exec pki pki-server stop --wait -v

      - name: Enable Nuxwdog
        run: |
          docker exec pki pki-server nuxwdog-enable
          docker exec pki mv /etc/pki/pki-tomcat/password.conf /root

      - name: Start PKI server with Nuxwdog
        run: |
          docker exec pki systemctl start pki-tomcatd-nuxwdog@pki-tomcat.service

      - name: Wait for PKI server to start
        run: |
          docker exec client curl \
              --retry 60 \
              --retry-delay 0 \
              --retry-connrefused \
              -s \
              -k \
              -o /dev/null \
              https://pki.example.com:8443

      - name: Check systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd-nuxwdog@pki-tomcat.service

      - name: Stop PKI server with Nuxwdog
        run: |
          docker exec pki systemctl stop pki-tomcatd-nuxwdog@pki-tomcat.service

      - name: Disable Nuxwdog
        run: |
          docker exec pki mv /root/password.conf /etc/pki/pki-tomcat
          docker exec pki pki-server nuxwdog-disable

      - name: Start PKI server
        run: |
          docker exec pki pki-server start --wait -v

      - name: Check systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Stop PKI server
        run: |
          docker exec pki pki-server stop --wait -v

      - name: Remove PKI server
        run: |
          docker exec pki pki-server remove -v

      - name: Gather artifacts from server container
        if: always()
        run: |
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Upload artifacts from server container
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ca-nuxwdog-test
          path: |
            /tmp/artifacts/pki
