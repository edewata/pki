name: CA cert-fix

on: workflow_call

env:
  DB_IMAGE: ${{ vars.DB_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Retrieve PKI images
        uses: actions/cache@v3
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up DS container
        run: |
          tests/bin/ds-container-create.sh \
              --ldap-port=389 \
              --ldaps-port=636 \
              ds
        env:
          IMAGE: pki-runner
          HOSTNAME: ds.example.com
          PASSWORD: Secret.123

      - name: Connect DS container to network
        run: docker network connect example ds --alias ds.example.com

      - name: Set up PKI container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect PKI container to network
        run: docker network connect example pki --alias pki.example.com

      - name: Create DS signing cert
        run: |
          docker exec pki pki \
              nss-cert-request \
              --subject "CN=DS Signing Certificate" \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --csr ds_signing.csr
          docker exec pki pki \
              nss-cert-issue \
              --csr ds_signing.csr \
              --ext /usr/share/pki/server/certs/ca_signing.conf \
              --cert ds_signing.crt
          docker exec pki pki \
              nss-cert-import \
              --cert ds_signing.crt \
              --trust CT,C,C \
              Self-Signed-CA
          docker exec pki certutil -L -d /root/.dogtag/nssdb

      - name: Create DS server cert
        run: |
          docker exec pki pki \
              nss-cert-request \
              --subject "CN=ds.example.com" \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --csr ds_server.csr
          docker exec pki pki \
              nss-cert-issue \
              --issuer Self-Signed-CA \
              --csr ds_server.csr \
              --ext /usr/share/pki/server/certs/sslserver.conf \
              --cert ds_server.crt
          docker exec pki pki \
              nss-cert-import \
              --cert ds_server.crt \
              Server-Cert
          docker exec pki certutil -L -d /root/.dogtag/nssdb

      - name: Import certs into DS container
        run: |
          docker exec pki pk12util \
              -d /root/.dogtag/nssdb \
              -o ds_server.p12 \
              -W Secret.123 \
              -n Server-Cert
          docker cp pki:ds_server.p12 ds_server.p12
          tests/bin/ds-container-certs-import.sh ds ds_server.p12
          tests/bin/ds-container-stop.sh ds
          tests/bin/ds-container-start.sh \
              --ldap-port=389 \
              ds

      - name: Check SSL connection to DS
        run: |
          docker exec \
              -e LDAPTLS_REQCERT=never \
              ds ldapsearch \
              -H ldaps://ds.example.com:636 \
              -x \
              -D "cn=Directory Manager" \
              -w Secret.123 \
              -b "" \
              -s base

      - name: Configure short-lived SSL server cert
        run: |
          # set cert validity to 5 minute
          VALIDITY_DEFAULT="2.default.params"
          docker exec pki sed -i \
              -e "s/^$VALIDITY_DEFAULT.range=.*$/$VALIDITY_DEFAULT.range=5/" \
              -e "/^$VALIDITY_DEFAULT.range=.*$/a $VALIDITY_DEFAULT.rangeUnit=minute" \
              /usr/share/pki/ca/conf/rsaServerCert.profile

          # check updated profile
          docker exec pki cat /usr/share/pki/ca/conf/rsaServerCert.profile

      #- name: Configure short-lived subsystem cert
      #  run: |
      #    # set cert validity to 5 minute
      #    VALIDITY_DEFAULT="2.default.params"
      #    docker exec pki sed -i \
      #        -e "s/^$VALIDITY_DEFAULT.range=.*$/$VALIDITY_DEFAULT.range=5/" \
      #        -e "/^$VALIDITY_DEFAULT.range=.*$/a $VALIDITY_DEFAULT.rangeUnit=minute" \
      #        /usr/share/pki/ca/conf/rsaSubsystemCert.profile

      #    # check updated profile
      #    docker exec pki cat /usr/share/pki/ca/conf/rsaSubsystemCert.profile

      - name: Configure short-lived audit signing cert
        run: |
          # set cert validity to 3 minute
          VALIDITY_DEFAULT="2.default.params"
          docker exec pki sed -i \
              -e "s/^$VALIDITY_DEFAULT.range=.*$/$VALIDITY_DEFAULT.range=3/" \
              -e "/^$VALIDITY_DEFAULT.range=.*$/a $VALIDITY_DEFAULT.rangeUnit=minute" \
              /usr/share/pki/ca/conf/caAuditSigningCert.profile

          # check updated profile
          docker exec pki cat /usr/share/pki/ca/conf/caAuditSigningCert.profile

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca-secure-ds.cfg \
              -s CA \
              -D pki_ds_url=ldaps://ds.example.com:636 \
              -v

              # -D pki_cert_id_generator=random \
              # -D pki_request_id_generator=random \

          docker exec pki pki-server cert-find

      - name: Check DS connection
        run: |
          docker exec pki pki-server ca-db-config-show > output
          cat output
          echo "ds.example.com" > expected
          sed -n 's/^\s\+Hostname:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual
          echo "636" > expected
          sed -n 's/^\s\+Port:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual
          echo "true" > expected
          sed -n 's/^\s\+Secure:\s\+\(\S\+\)$/\1/p' output > actual
          diff expected actual

      - name: Run PKI healthcheck
        run: |
          docker exec pki pki-healthcheck --failures-only \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          echo "Expiring in a day: sslserver" > expected
          #echo "Expiring in a day: subsystem" >> expected
          echo "Expiring in a day: audit_signing" >> expected
          diff expected stderr || true

      - name: Check CA admin
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt
          docker exec pki pki client-cert-import ca_signing --ca-cert ca_signing.crt
          docker exec pki pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Renew expired SSL server cert
        run: |
          echo Secret.123 | docker exec \
              -e LDAPTLS_REQCERT=never \
              -i \
              pki pki-server -v \
              cert-fix \
              --ldap-url ldaps://ds.example.com:636 \
              --agent-uid caadmin

      - name: Run PKI healthcheck
        run: |
          docker exec pki pki-healthcheck --failures-only || true

      - name: Check systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check CA debug log
        if: always()
        run: |
          docker exec pki find /var/log/pki/pki-tomcat/ca -name "debug.*" -exec cat {} \;

      - name: Check CA selftests log
        if: always()
        run: |
          docker exec pki cat /var/log/pki/pki-tomcat/ca/selftests.log

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh --output=/tmp/artifacts/pki ds
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ca-cert-fix
          path: |
            /tmp/artifacts/pki
