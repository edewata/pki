name: KRA on separate instance

on: workflow_call

env:
  DS_IMAGE: ${{ vars.DS_IMAGE || 'quay.io/389ds/dirsrv' }}

jobs:
  # docs/installation/kra/Installing_KRA_on_Separate_Instance.md
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/pki
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve PKI images
        uses: actions/cache@v4
        with:
          key: pki-images-${{ github.sha }}
          path: pki-images.tar

      - name: Load PKI images
        run: docker load --input pki-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up root CA DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=rootcads.example.com \
              --network=example \
              --network-alias=rootcads.example.com \
              --password=Secret.123 \
              rootcads

      - name: Set up root CA container
        run: |
          tests/bin/runner-init.sh \
              --hostname=rootca.example.com \
              --network=example \
              --network-alias=rootca.example.com \
              rootca

      - name: Install root CA
        run: |
          docker exec rootca pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://rootcads.example.com:3389 \
              -v

      - name: Check root CA server status
        run: |
          docker exec rootca pki-server status | tee output

          # root CA should be a domain manager
          echo "True" > expected
          sed -n 's/^ *SD Manager: *\(.*\)$/\1/p' output > actual
          diff expected actual

      - name: Check security domain config in root CA
        run: |
          # root CA should run security domain service
          cat > expected << EOF
          securitydomain.checkIP=false
          securitydomain.checkinterval=300000
          securitydomain.flushinterval=86400000
          securitydomain.host=rootca.example.com
          securitydomain.httpport=8080
          securitydomain.httpsadminport=8443
          securitydomain.name=EXAMPLE
          securitydomain.select=new
          securitydomain.source=ldap
          EOF

          docker exec rootca pki-server ca-config-find | grep ^securitydomain. | sort | tee actual
          diff expected actual

      - name: Check root CA certs
        if: always()
        run: |
          docker exec rootca pki -d /var/lib/pki/pki-tomcat/conf/alias nss-cert-find

          docker exec rootca pki-server cert-export \
              --cert-file ${SHARED}/root-ca_signing.crt \
              ca_signing

      - name: Check root CA users
        if: always()
        run: |
          docker exec rootca pki-server ca-user-find
          docker exec rootca pki-server ca-user-show caadmin
          docker exec rootca pki-server ca-user-role-find caadmin

      - name: Set up sub CA DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=subcads.example.com \
              --network=example \
              --network-alias=subcads.example.com \
              --password=Secret.123 \
              subcads

      - name: Set up sub CA container
        run: |
          tests/bin/runner-init.sh \
              --hostname=subca.example.com \
              --network=example \
              --network-alias=subca.example.com \
              subca

      - name: Install sub CA
        run: |
          docker exec subca pkispawn \
              -f /usr/share/pki/server/examples/installation/subca.cfg \
              -s CA \
              -D pki_cert_chain_path=${SHARED}/root-ca_signing.crt \
              -D pki_audit_signing_nickname= \
              -D pki_ds_url=ldap://subcads.example.com:3389 \
              -D pki_security_domain_uri=https://rootca.example.com:8443 \
              -D pki_subordinate_create_new_security_domain=True \
              -D pki_subordinate_security_domain_name=SUBORDINATE \
              -D pki_issuing_ca_uri=https://rootca.example.com:8443 \
              -v

      - name: Check sub CA server status
        run: |
          docker exec subca pki-server status | tee output

          # this sub CA should be a domain manager since it's created with
          # pki_subordinate_create_new_security_domain=True
          echo "True" > expected
          sed -n 's/^ *SD Manager: *\(.*\)$/\1/p' output > actual
          diff expected actual

      - name: Check sub CA certs
        if: always()
        run: |
          docker exec subca pki -d /var/lib/pki/pki-tomcat/conf/alias nss-cert-find

          docker exec subca pki-server cert-export \
              --cert-file ${SHARED}/ca_signing.crt \
              ca_signing

      - name: Check sub CA users
        if: always()
        run: |
          docker exec subca pki-server ca-user-find
          docker exec subca pki-server ca-user-show caadmin
          docker exec subca pki-server ca-user-role-find caadmin

      - name: Check security domain config in sub CA
        run: |
          # sub CA should run security domain service
          cat > expected << EOF
          securitydomain.checkIP=false
          securitydomain.checkinterval=300000
          securitydomain.flushinterval=86400000
          securitydomain.host=subca.example.com
          securitydomain.httpport=8080
          securitydomain.httpsadminport=8443
          securitydomain.name=SUBORDINATE
          securitydomain.select=new
          securitydomain.source=ldap
          EOF

          docker exec subca pki-server ca-config-find | grep ^securitydomain. | sort | tee actual
          diff expected actual

      - name: Export subordinate CA cert bundle
        run: |
          cat root-ca_signing.crt > cert_chain.crt
          cat ca_signing.crt >> cert_chain.crt

          cat cert_chain.crt

      - name: Install banner in sub CA container
        run: docker exec subca cp /usr/share/pki/server/examples/banner/banner.txt /var/lib/pki/pki-tomcat/conf

      - name: Verify sub CA admin
        run: |
          docker exec subca pki nss-cert-import \
              --cert ${SHARED}/root-ca_signing.crt \
              --trust CT,C,C

          docker exec subca pki nss-cert-import \
              --cert ${SHARED}/ca_signing.crt \
              --trust CT,C,C

          docker exec subca pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123

          docker exec subca pki -n caadmin --ignore-banner ca-user-show caadmin

      - name: Set up KRA DS container
        run: |
          tests/bin/ds-create.sh \
              --image=${{ env.DS_IMAGE }} \
              --hostname=krads.example.com \
              --network=example \
              --network-alias=krads.example.com \
              --password=Secret.123 \
              krads

      - name: Set up KRA container
        run: |
          tests/bin/runner-init.sh \
              --hostname=kra.example.com \
              --network=example \
              --network-alias=kra.example.com \
              kra

      - name: Install KRA
        run: |
          docker exec subca pki-server cert-export \
              --cert-file ${SHARED}/ca_signing.crt \
              ca_signing

          docker exec subca cp /root/.dogtag/pki-tomcat/ca_admin.cert ${SHARED}/ca_admin.cert

          docker exec kra pkispawn \
              -f /usr/share/pki/server/examples/installation/kra.cfg \
              -s KRA \
              -D pki_security_domain_uri=https://subca.example.com:8443 \
              -D pki_issuing_ca_uri=https://subca.example.com:8443 \
              -D pki_cert_chain_nickname=ca_signing \
              -D pki_cert_chain_path=${SHARED}/cert_chain.crt \
              -D pki_audit_signing_nickname= \
              -D pki_admin_cert_file=${SHARED}/ca_admin.cert \
              -D pki_ds_url=ldap://krads.example.com:3389 \
              -v

      - name: Check KRA server status
        run: |
          docker exec kra pki-server status | tee output

          # KRA should not be a domain manager
          echo "False" > expected
          sed -n 's/^ *SD Manager: *\(.*\)$/\1/p' output > actual
          diff expected actual

      - name: Check security domain config in KRA
        run: |
          # KRA should join existing security domain in sub CA
          cat > expected << EOF
          securitydomain.host=subca.example.com
          securitydomain.httpport=8080
          securitydomain.httpsadminport=8443
          securitydomain.name=SUBORDINATE
          securitydomain.select=existing
          EOF

          docker exec kra pki-server kra-config-find | grep ^securitydomain. | sort | tee actual
          diff expected actual

      - name: Check KRA certs
        if: always()
        run: |
          docker exec kra pki -d /var/lib/pki/pki-tomcat/conf/alias nss-cert-find

      - name: Check KRA users
        if: always()
        run: |
          docker exec kra pki-server kra-user-find
          docker exec kra pki-server kra-user-show kraadmin
          docker exec kra pki-server kra-user-role-find kraadmin

      - name: Install banner in KRA container
        run: docker exec kra cp /usr/share/pki/server/examples/banner/banner.txt /var/lib/pki/pki-tomcat/conf

      - name: Run PKI healthcheck
        run: docker exec kra pki-healthcheck --failures-only

      - name: Verify KRA admin
        run: |
          docker exec kra pki nss-cert-import \
              --cert ${SHARED}/root-ca_signing.crt \
              --trust CT,C,C

          docker exec kra pki nss-cert-import \
              --cert ${SHARED}/ca_signing.crt \
              --trust CT,C,C

          docker exec subca cp /root/.dogtag/pki-tomcat/ca_admin_cert.p12 ${SHARED}/ca_admin_cert.p12
          docker exec kra pki pkcs12-import \
              --pkcs12 ${SHARED}/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec kra pki -n caadmin --ignore-banner kra-user-show kraadmin

      - name: Verify KRA connector in sub CA
        run: |
          docker exec subca pki -n caadmin --ignore-banner ca-kraconnector-show | tee output
          sed -n 's/\s*Host:\s\+\(\S\+\):.*/\1/p' output > actual
          echo kra.example.com > expected
          diff expected actual

      - name: Check cert enrollment with key archival
        run: |
          # export transport cert
          docker exec kra pki-server cert-export \
              --cert-file $SHARED/kra_transport.crt \
              kra_transport

          # import transport cert
          docker exec subca pki nss-cert-import \
              --cert $SHARED/kra_transport.crt \
              kra_transport

          # generate key and cert request
          docker exec subca pki \
              nss-cert-request \
              --type crmf \
              --subject UID=testuser1 \
              --transport kra_transport \
              --csr testuser1.csr

          # issue cert
          docker exec subca pki \
              -u caadmin \
              -w Secret.123 \
              --ignore-banner \
              ca-cert-issue \
              --request-type crmf \
              --profile caUserCert \
              --subject UID=testuser1 \
              --csr-file testuser1.csr \
              --output-file testuser1.crt

          docker exec subca openssl x509 \
              -text \
              -noout \
              -in testuser1.crt

      - name: Check cert enrollment with key archival again
        run: |
          # generate key and cert request
          docker exec subca pki \
              nss-cert-request \
              --type crmf \
              --subject UID=testuser2 \
              --transport kra_transport \
              --csr testuser2.csr

          # issue cert
          docker exec subca pki \
              -u caadmin \
              -w Secret.123 \
              --ignore-banner \
              ca-cert-issue \
              --request-type crmf \
              --profile caUserCert \
              --subject UID=testuser2 \
              --csr-file testuser2.csr \
              --output-file testuser2.crt

          docker exec subca openssl x509 \
              -text \
              -noout \
              -in testuser2.crt

      - name: Remove KRA
        run: docker exec kra pkidestroy -s KRA -v

      - name: Remove sub CA
        run: docker exec subca pkidestroy -s CA -v

      - name: Remove root CA
        run: docker exec rootca pkidestroy -s CA -v

      - name: Check root CA systemd journal
        if: always()
        run: |
          docker exec rootca journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check root CA access log
        if: always()
        run: |
          docker exec rootca find /var/log/pki/pki-tomcat -name "localhost_access_log.*" -exec cat {} \;

      - name: Check root CA debug log
        if: always()
        run: |
          docker exec rootca find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check sub CA systemd journal
        if: always()
        run: |
          docker exec subca journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check sub CA access log
        if: always()
        run: |
          docker exec subca find /var/log/pki/pki-tomcat -name "localhost_access_log.*" -exec cat {} \;

      - name: Check sub CA debug log
        if: always()
        run: |
          docker exec subca find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Check KRA systemd journal
        if: always()
        run: |
          docker exec kra journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check KRA access log
        if: always()
        run: |
          docker exec kra find /var/log/pki/pki-tomcat -name "localhost_access_log.*" -exec cat {} \;

      - name: Check KRA debug log
        if: always()
        run: |
          docker exec kra find /var/lib/pki/pki-tomcat/logs/kra -name "debug.*" -exec cat {} \;
